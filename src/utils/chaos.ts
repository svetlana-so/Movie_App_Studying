// DO NOT EDIT THIS FILE (except for debugging).
//
// Consider it a set of constraints or limitations that come from the outside (API, DB, etc.)
// You have to work around them and make sure the app can handle them.

const DISABLE_CHAOS = import.meta.env.MODE === 'test'

const PROBABILITIES = {
  promise: 0.5,
  error: 0.3,
  movieTitle: 0.2,
}

const API_RESPONSE_TIME = {
  min: 100,
  max: 3000,
}

export const getRandomResponeTime = (min = API_RESPONSE_TIME.min, max = API_RESPONSE_TIME.max) => {
  min = Math.ceil(min)
  max = Math.floor(max)

  return Math.floor(Math.random() * (max - min + 1)) + min
}

export const randomlyRejectPromise = <T>(
  promise: Promise<T>,
  probability = PROBABILITIES.promise,
) =>
  new Promise<T>((resolve, reject) => {
    promise.then(value => {
      if (Math.random() >= probability || DISABLE_CHAOS) {
        resolve(value)
      } else {
        reject(new Error('Request failed'))
      }
    })
  })

export const randomizeResponseTime = <T>(promise: Promise<T>) =>
  new Promise<T>((resolve, reject) => {
    setTimeout(() => {
      promise.then(resolve, reject)
    }, getRandomResponeTime())
  })

export const randomlyThrowError = (probability = PROBABILITIES.error) => {
  if (Math.random() >= probability || DISABLE_CHAOS) return

  throw new Error('Some sort of error happened.')
}

export const randomlyDropMovieTitle = <T extends { year: number }>(
  movies: Array<T>,
  probability = PROBABILITIES.movieTitle,
) => {
  if (!movies.length) return movies
  if (Math.random() >= probability || DISABLE_CHAOS) return movies

  return [
    {
      ...movies[0],
      title: undefined,
    },
    ...movies,
  ]
}
